# Nightly sanity tests

name: Nightly Sanity Tests

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  # Run every day at 3:00 AM EDT (i.e., 7 am UTC)
  schedule:
    - cron: "0 7 * * *"

env:
  builddir: "b/ninja"
  vsftpddir: "vsftpd_testing"
  vsftpdurl: "https://security.appspot.com/downloads/vsftpd-3.0.3.tar.gz"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Next we build
  build:
    name: Build cconv-standalone and clang
    # The type of OS that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Install all the required dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libboost-all-dev git python cmake build-essential wget tar ninja-build liblzma-dev libreadline-dev
      # clone and install bear
      # Needed for generating compile_commands.json
      - name: Clone Bear
        run: |
          mkdir -p ${{github.workspace}}/depsfolder
          cd ${{github.workspace}}/depsfolder
          git clone https://github.com/rizsotto/Bear.git bear
          cd bear
          git pull
          git checkout -f 75ff7f561652509ec9b34095881fdb6c4a56c9e0
      - name: Install Bear
        run: |
          mkdir -p ${{runner.workspace}}/depsfolder/bear
          cd ${{runner.workspace}}/depsfolder/bear
          cmake ${{github.workspace}}/depsfolder/bear
          make all
          sudo make install
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout our repository
        uses: actions/checkout@v2
        with:
          repository: correctcomputation/checkedc-clang
          ref: master
          path: depsfolder/checkedc-clang

      # clone Checked C headers
      - name: Clone Checked C headers
        uses: actions/checkout@v2
        with:
          repository: microsoft/checkedc
          path: ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc

      - name: Check Checked C headers
        run: |
          ls ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc

      # Build cconv-standadlone
      - name: Build cconv-standalone
        run: |
          mkdir -p ${{runner.workspace}}/${{env.builddir}}
          cd ${{runner.workspace}}/${{env.builddir}}
          cmake -G Ninja -DLLVM_TARGETS_TO_BUILD=X86 -DLLVM_ENABLE_RTTI=ON -DCMAKE_BUILD_TYPE="MinSizeRel" -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra" ${{github.workspace}}/depsfolder/checkedc-clang/llvm
          ninja cconv-standalone
          ninja clang
          ninja llvm-config
          ninja FileCheck
          ninja not
          ninja count c-index-test clang-diff clang-format opt clang-check


      # Upload the built cconv-standalone and clang
      - name: Upload Build files
        uses: actions/upload-artifact@v2
        with:
          name: cconvbuild
          path: ${{runner.workspace}}/${{env.builddir}}
          retention-days: 3

      # Upload script files
      - name: Upload script files
        uses: actions/upload-artifact@v2
        with:
          name: cconvscripts
          path: ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils
          retention-days: 3


  unittests:
    name: Run Unit tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install git python3.7 cmake build-essential wget tar ninja-build liblzma-dev libreadline-dev

      # Download the built cconv-standalone and clang
      - name: Download Build files
        uses: actions/download-artifact@v2
        with:
          name: cconvbuild
          path: ${{runner.workspace}}/${{env.builddir}}
          
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout our repository
        uses: actions/checkout@v2
        with:
          repository: correctcomputation/checkedc-clang
          ref: master
          path: depsfolder/checkedc-clang

      # clone Checked C headers
      - name: Clone Checked C headers
        uses: actions/checkout@v2
        with:
          repository: microsoft/checkedc
          path: ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc

      # Run units tests
      - name: Run Unit Tests
        run: |
          cd ${{runner.workspace}}/${{env.builddir}}/bin
          chmod 700 *
          export CPATH=${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include
          ! ./llvm-lit ${{github.workspace}}/depsfolder/checkedc-clang/clang/test/CheckedCRewriter/*.c | grep -e "^FAIL"

  testvsftpd:
    name: Build and test vsftpd
    needs: build
    # The type of OS that the job will run on
    runs-on: ubuntu-latest
    steps:
      # Install all the required dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libboost-all-dev git python cmake build-essential wget tar ninja-build liblzma-dev libreadline-dev
      # clone and install bear
      # Needed for generating compile_commands.json
      - name: Clone Bear
        run: |
          mkdir -p ${{github.workspace}}/depsfolder
          cd ${{github.workspace}}/depsfolder
          git clone https://github.com/rizsotto/Bear.git bear
          cd bear
          git pull
          git checkout -f 75ff7f561652509ec9b34095881fdb6c4a56c9e0
      - name: Install Bear
        run: |
          mkdir -p ${{runner.workspace}}/depsfolder/bear
          cd ${{runner.workspace}}/depsfolder/bear
          cmake ${{github.workspace}}/depsfolder/bear
          make all
          sudo make install
      # Download the built cconv-standalone and clang
      - name: Download Build files
        uses: actions/download-artifact@v2
        with:
          name: cconvbuild
          path: ${{runner.workspace}}/${{env.builddir}}

      # Download script files
      - name: Download script files
        uses: actions/download-artifact@v2
        with:
          name: cconvscripts
          path: ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils

      # clone Checked C headers
      - name: Clone Checked C headers
        uses: actions/checkout@v2
        with:
          repository: microsoft/checkedc
          path: ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc

      - name: Build vsftpd
        run: |
          mkdir ${{runner.workspace}}/${{env.vsftpddir}}
          cd ${{runner.workspace}}/${{env.vsftpddir}}
          wget ${{env.vsftpdurl}}
          tar -xvzf vsftpd-3.0.3.tar.gz
          cd vsftpd-3.0.3
          bear make
          ls compile_commands.json
          pwd

      - name: Testing vsftpd
        run: |
          chmod -R 777 ${{github.workspace}}/depsfolder
          chmod -R 777 ${{runner.workspace}}/${{env.builddir}}
          cd ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils/cc_conv
          python convert_project.py --includeDir ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include -p ${{runner.workspace}}/${{env.builddir}}/bin/cconv-standalone -pr ${{runner.workspace}}/${{env.vsftpddir}}/vsftpd-3.0.3

  testptrdist:
    name: Build and test ptrdist

    needs: build
    # The type of OS that the job will run on
    runs-on: ubuntu-latest
    steps:
      # Install all the required dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libboost-all-dev git python cmake build-essential wget tar ninja-build liblzma-dev libreadline-dev
      # clone and install bear
      # Needed for generating compile_commands.json
      - name: Clone Bear
        run: |
          mkdir -p ${{github.workspace}}/depsfolder
          cd ${{github.workspace}}/depsfolder
          git clone https://github.com/rizsotto/Bear.git bear
          cd bear
          git pull
          git checkout -f 75ff7f561652509ec9b34095881fdb6c4a56c9e0
      - name: Install Bear
        run: |
          mkdir -p ${{runner.workspace}}/depsfolder/bear
          cd ${{runner.workspace}}/depsfolder/bear
          cmake ${{github.workspace}}/depsfolder/bear
          make all
          sudo make install
      - name: Clone Checkedc-eval
        uses: actions/checkout@v2
        with:
          repository: plum-umd/checkedc-eval
          path: depsfolder/checkedc-eval
          token: ${{secrets.EVAL_REPO_ACCESS}}
          submodules: true

      # Download the built cconv-standalone and clang
      - name: Download Build files
        uses: actions/download-artifact@v2
        with:
          name: cconvbuild
          path: ${{runner.workspace}}/${{env.builddir}}

      # Download script files
      - name: Download script files
        uses: actions/download-artifact@v2
        with:
          name: cconvscripts
          path: ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils

      # clone Checked C headers
      - name: Clone Checked C headers
        uses: actions/checkout@v2
        with:
          repository: microsoft/checkedc
          path: ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc

      - name: Build PtrDist
        run: |
          cd ${{github.workspace}}/depsfolder/checkedc-eval
          tar -xvzf ptrdist-1.1.tar.gz
          cd ptrdist-1.1
          ./RUNGCC.sh

      - name: Test anagram (PtrDist)
        run: |
          chmod -R 777 ${{github.workspace}}/depsfolder
          chmod -R 777 ${{runner.workspace}}/${{env.builddir}}
          cd ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils/cc_conv
          python convert_project.py --includeDir ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include -p ${{runner.workspace}}/${{env.builddir}}/bin/cconv-standalone -pr ${{github.workspace}}/depsfolder/checkedc-eval/ptrdist-1.1/anagram

      - name: Test bc (PtrDist)
        run: |
          cd ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils/cc_conv
          python convert_project.py --includeDir ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include -p ${{runner.workspace}}/${{env.builddir}}/bin/cconv-standalone -pr ${{github.workspace}}/depsfolder/checkedc-eval/ptrdist-1.1/bc

      - name: Test ft (PtrDist)
        run: |
          cd ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils/cc_conv
          python convert_project.py --includeDir ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include -p ${{runner.workspace}}/${{env.builddir}}/bin/cconv-standalone -pr ${{github.workspace}}/depsfolder/checkedc-eval/ptrdist-1.1/ft

      - name: Test ks (PtrDist)
        run: |
          cd ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils/cc_conv
          python convert_project.py --includeDir ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include -p ${{runner.workspace}}/${{env.builddir}}/bin/cconv-standalone -pr ${{github.workspace}}/depsfolder/checkedc-eval/ptrdist-1.1/ks

      - name: Test yacr2 (PtrDist)
        run: |
          cd ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils/cc_conv
          python convert_project.py --includeDir ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include -p ${{runner.workspace}}/${{env.builddir}}/bin/cconv-standalone -pr ${{github.workspace}}/depsfolder/checkedc-eval/ptrdist-1.1/yacr2

  buildandtestlibarchive:
    name: Build and test libarchive
    needs: build
    # The type of OS that the job will run on
    runs-on: ubuntu-latest
    steps:
      # Install all the required dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libboost-all-dev git python cmake build-essential wget tar ninja-build liblzma-dev libreadline-dev
      # clone and install bear
      # Needed for generating compile_commands.json
      - name: Clone Bear
        run: |
          mkdir -p ${{github.workspace}}/depsfolder
          cd ${{github.workspace}}/depsfolder
          git clone https://github.com/rizsotto/Bear.git bear
          cd bear
          git pull
          git checkout -f 75ff7f561652509ec9b34095881fdb6c4a56c9e0
      - name: Install Bear
        run: |
          mkdir -p ${{runner.workspace}}/depsfolder/bear
          cd ${{runner.workspace}}/depsfolder/bear
          cmake ${{github.workspace}}/depsfolder/bear
          make all
          sudo make install
      - name: Clone Checkedc-eval
        uses: actions/checkout@v2
        with:
          repository: plum-umd/checkedc-eval
          path: depsfolder/checkedc-eval
          token: ${{secrets.EVAL_REPO_ACCESS}}
          submodules: true

      # Download the built cconv-standalone and clang
      - name: Download Build files
        uses: actions/download-artifact@v2
        with:
          name: cconvbuild
          path: ${{runner.workspace}}/${{env.builddir}}

      # Download script files
      - name: Download script files
        uses: actions/download-artifact@v2
        with:
          name: cconvscripts
          path: ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils

      # clone Checked C headers
      - name: Clone Checked C headers
        uses: actions/checkout@v2
        with:
          repository: microsoft/checkedc
          path: ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc

      - name: Build libarchive
        run: |
          mkdir -p ${{runner.workspace}}/depsfolder/libarchive.obj
          cd ${{runner.workspace}}/depsfolder/libarchive.obj
          cmake -DCMAKE_C_FLAGS="-w" ${{github.workspace}}/depsfolder/checkedc-eval/libarchive
          bear make

      - name: Testing libarchive
        run: |
          chmod -R 777 ${{github.workspace}}/depsfolder
          chmod -R 777 ${{runner.workspace}}/${{env.builddir}}
          cd ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils/cc_conv
          python convert_project.py --skip '/.*/test/.*' --skip '/.*/test_utils/.*' --includeDir ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include -p ${{runner.workspace}}/${{env.builddir}}/bin/cconv-standalone -pr ${{runner.workspace}}/depsfolder/libarchive.obj

  buildandtestlua:
    name: Build and test lua
    needs: build
    # The type of OS that the job will run on
    runs-on: ubuntu-latest
    steps:
      # Install all the required dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libboost-all-dev git python cmake build-essential wget tar ninja-build liblzma-dev libreadline-dev
      # clone and install bear
      # Needed for generating compile_commands.json
      - name: Clone Bear
        run: |
          mkdir -p ${{github.workspace}}/depsfolder
          cd ${{github.workspace}}/depsfolder
          git clone https://github.com/rizsotto/Bear.git bear
          cd bear
          git pull
          git checkout -f 75ff7f561652509ec9b34095881fdb6c4a56c9e0
      - name: Install Bear
        run: |
          mkdir -p ${{runner.workspace}}/depsfolder/bear
          cd ${{runner.workspace}}/depsfolder/bear
          cmake ${{github.workspace}}/depsfolder/bear
          make all
          sudo make install
      - name: Clone Checkedc-eval
        uses: actions/checkout@v2
        with:
          repository: plum-umd/checkedc-eval
          path: depsfolder/checkedc-eval
          token: ${{secrets.EVAL_REPO_ACCESS}}
          submodules: true

      # Download the built cconv-standalone and clang
      - name: Download Build files
        uses: actions/download-artifact@v2
        with:
          name: cconvbuild
          path: ${{runner.workspace}}/${{env.builddir}}

      # Download script files
      - name: Download script files
        uses: actions/download-artifact@v2
        with:
          name: cconvscripts
          path: ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils

      # clone Checked C headers
      - name: Clone Checked C headers
        uses: actions/checkout@v2
        with:
          repository: microsoft/checkedc
          path: ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc

      - name: Build lua
        run: |
          cd ${{github.workspace}}/depsfolder/checkedc-eval/lua
          bear make linux

      - name: Testing lua
        run: |
          chmod -R 777 ${{github.workspace}}/depsfolder
          chmod -R 777 ${{runner.workspace}}/${{env.builddir}}
          cd ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils/cc_conv
          python convert_project.py --includeDir ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include -p ${{runner.workspace}}/${{env.builddir}}/bin/cconv-standalone -pr ${{github.workspace}}/depsfolder/checkedc-eval/lua

  buildandtestlibtiff:
    name: Build and test libtiff

    needs: build
    # The type of OS that the job will run on
    runs-on: ubuntu-latest
    steps:
      # Install all the required dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libboost-all-dev git python cmake build-essential wget tar ninja-build liblzma-dev libreadline-dev
      # clone and install bear
      # Needed for generating compile_commands.json
      - name: Clone Bear
        run: |
          mkdir -p ${{github.workspace}}/depsfolder
          cd ${{github.workspace}}/depsfolder
          git clone https://github.com/rizsotto/Bear.git bear
          cd bear
          git pull
          git checkout -f 75ff7f561652509ec9b34095881fdb6c4a56c9e0
      - name: Install Bear
        run: |
          mkdir -p ${{runner.workspace}}/depsfolder/bear
          cd ${{runner.workspace}}/depsfolder/bear
          cmake ${{github.workspace}}/depsfolder/bear
          make all
          sudo make install
      - name: Clone Checkedc-eval
        uses: actions/checkout@v2
        with:
          repository: plum-umd/checkedc-eval
          path: depsfolder/checkedc-eval
          token: ${{secrets.EVAL_REPO_ACCESS}}
          submodules: true

      # Download the built cconv-standalone and clang
      - name: Download Build files
        uses: actions/download-artifact@v2
        with:
          name: cconvbuild
          path: ${{runner.workspace}}/${{env.builddir}}

      # Download script files
      - name: Download script files
        uses: actions/download-artifact@v2
        with:
          name: cconvscripts
          path: ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils

      # clone Checked C headers
      - name: Clone Checked C headers
        uses: actions/checkout@v2
        with:
          repository: microsoft/checkedc
          path: ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc

      - name: Build libtiff
        run: |
          mkdir -p ${{runner.workspace}}/depsfolder/libtiff.obj
          cd ${{runner.workspace}}/depsfolder/libtiff.obj
          cmake -DCMAKE_C_FLAGS="-w" ${{github.workspace}}/depsfolder/checkedc-eval/libtiff
          bear make

      - name: Testing libtiff
        run: |
          chmod -R 777 ${{github.workspace}}/depsfolder
          chmod -R 777 ${{runner.workspace}}/${{env.builddir}}
          cd ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils/cc_conv
          python convert_project.py --skip '/.*/tif_stream.cxx' --skip '.*/test/.*\.c' --includeDir ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include -p ${{runner.workspace}}/${{env.builddir}}/bin/cconv-standalone -pr ${{runner.workspace}}/depsfolder/libtiff.obj

  buildandtestzlib:
    name: Build and test zlib
    needs: build
    # The type of OS that the job will run on
    runs-on: ubuntu-latest
    steps:
      # Install all the required dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libboost-all-dev git python cmake build-essential wget tar ninja-build liblzma-dev libreadline-dev
      # clone and install bear
      # Needed for generating compile_commands.json
      - name: Clone Bear
        run: |
          mkdir -p ${{github.workspace}}/depsfolder
          cd ${{github.workspace}}/depsfolder
          git clone https://github.com/rizsotto/Bear.git bear
          cd bear
          git pull
          git checkout -f 75ff7f561652509ec9b34095881fdb6c4a56c9e0
      - name: Install Bear
        run: |
          mkdir -p ${{runner.workspace}}/depsfolder/bear
          cd ${{runner.workspace}}/depsfolder/bear
          cmake ${{github.workspace}}/depsfolder/bear
          make all
          sudo make install
      - name: Clone Checkedc-eval
        uses: actions/checkout@v2
        with:
          repository: plum-umd/checkedc-eval
          path: depsfolder/checkedc-eval
          token: ${{secrets.EVAL_REPO_ACCESS}}
          submodules: true

      # Download the built cconv-standalone and clang
      - name: Download Build files
        uses: actions/download-artifact@v2
        with:
          name: cconvbuild
          path: ${{runner.workspace}}/${{env.builddir}}

      # Download script files
      - name: Download script files
        uses: actions/download-artifact@v2
        with:
          name: cconvscripts
          path: ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils

      # clone Checked C headers
      - name: Clone Checked C headers
        uses: actions/checkout@v2
        with:
          repository: microsoft/checkedc
          path: ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc

      - name: Build zlib
        run: |
          mkdir -p ${{runner.workspace}}/depsfolder/zlib.obj
          cd ${{runner.workspace}}/depsfolder/zlib.obj
          cmake -DCMAKE_C_FLAGS="-w" ${{github.workspace}}/depsfolder/checkedc-eval/zlib
          bear make

      - name: Testing zlib
        run: |
          chmod -R 777 ${{github.workspace}}/depsfolder
          chmod -R 777 ${{runner.workspace}}/${{env.builddir}}
          cd ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils/cc_conv
          python convert_project.py --skip '/.*/test/.*' --includeDir ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include -p ${{runner.workspace}}/${{env.builddir}}/bin/cconv-standalone -pr ${{runner.workspace}}/depsfolder/zlib.obj
