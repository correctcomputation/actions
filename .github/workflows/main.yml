# This file is generated by generate-workflow.py. To update this file, update
# generate-workflow.py instead and re-run it. Some things in this file are
# explained by comments in generate-workflow.py.

name: 3C benchmark tests

on:
  # Run every day at 3:00 AM EDT (i.e., 7 am UTC)
  schedule:
    - cron: "0 7 * * *"
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch or commit ID of correctcomputation/checkedc-clang to run workflow on"
        required: true
        default: "main"

env:
  benchmark_tar_dir: "/home/github/checkedc-benchmarks"
  builddir: "${{github.workspace}}/b/ninja"
  benchmark_conv_dir: "${{github.workspace}}/benchmark_conv"
  branch_for_scheduled_run: "main"
  include_dir: "${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include"
  port_tools: "${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/3c/utils/port_tools"

jobs:

  # Cleanup files left behind by prior runs
  clean:
    name: Clean
    runs-on: self-hosted
    steps:
      - name: Clean
        run: |
          rm -rf ${{env.benchmark_conv_dir}}
          mkdir -p ${{env.benchmark_conv_dir}}
          rm -rf ${{env.builddir}}
          mkdir -p ${{env.builddir}}
          rm -rf ${{github.workspace}}/depsfolder
          mkdir -p ${{github.workspace}}/depsfolder

  # Clone and build 3c and clang
  # (clang is needed to test compilation of converted benchmarks.)
  build_3c:
    name: Build 3c and clang
    needs: clean
    runs-on: self-hosted
    steps:
      - name: Branch or commit ID
        run: echo "${{ github.event.inputs.branch || env.branch_for_scheduled_run }}"
      - name: Checkout our repository
        run: |
          git init ${{github.workspace}}/depsfolder/checkedc-clang
          cd ${{github.workspace}}/depsfolder/checkedc-clang
          git remote add origin https://github.com/correctcomputation/checkedc-clang
          git fetch --depth 1 origin "${{ github.event.inputs.branch || env.branch_for_scheduled_run }}"
          git checkout FETCH_HEAD
          git clone --depth 1 https://github.com/microsoft/checkedc ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc

      - name: Build 3c and clang
        run: |
          cd ${{env.builddir}}
          cmake -G Ninja \
            -DLLVM_TARGETS_TO_BUILD=X86 \
            -DCMAKE_BUILD_TYPE="Debug" \
            -DLLVM_OPTIMIZED_TABLEGEN=ON \
            -DLLVM_USE_SPLIT_DWARF=ON \
            -DLLVM_ENABLE_PROJECTS="clang" \
            ${{github.workspace}}/depsfolder/checkedc-clang/llvm
          # -l 36: Try not to overload gamera. Hopefully this will use all 36
          # hyperthreads when nothing else is running and automatically scale
          # back when other jobs are running. TODO: Better solution?
          ninja -l 36 3c clang
          chmod -R 777 ${{github.workspace}}/depsfolder
          chmod -R 777 ${{env.builddir}}

  # Run Test for 3C
  test_3c:
    name: 3C regression tests
    needs: build_3c
    runs-on: self-hosted
    steps:
      - name: 3C regression tests
        run: |
          cd ${{env.builddir}}
          ninja check-3c

  # Convert our benchmark programs

  test_zlib_no_alltypes:
    name: Test ZLib (no -alltypes)
    needs: build_3c
    runs-on: self-hosted
    steps:
      - name: Build ZLib
        run: |
          mkdir -p ${{env.benchmark_conv_dir}}/no-alltypes
          cd ${{env.benchmark_conv_dir}}/no-alltypes
          tar -xvzf ${{env.benchmark_tar_dir}}/zlib-1.2.11.tar.gz
          cd zlib-1.2.11
          mkdir build
          cd build
          cmake -DCMAKE_C_FLAGS="-w" ..
          bear make

      - name: Convert zlib
        run: |
          cd ${{env.benchmark_conv_dir}}/no-alltypes/zlib-1.2.11/build
          ${{env.port_tools}}/convert_project.py \
            --skip '/.*/test/.*' \
            --includeDir ${{env.include_dir}} \
            -p ${{env.builddir}}/bin/3c \
            -pr .

      - name: Build converted zlib
        run: |
          cd ${{env.benchmark_conv_dir}}/no-alltypes/zlib-1.2.11/build
          cp -r out.checked/* .
          make -k CC="${{env.builddir}}/bin/clang"

  test_zlib_alltypes:
    name: Test ZLib (-alltypes)
    needs: build_3c
    runs-on: self-hosted
    steps:
      - name: Build ZLib
        run: |
          mkdir -p ${{env.benchmark_conv_dir}}/alltypes
          cd ${{env.benchmark_conv_dir}}/alltypes
          tar -xvzf ${{env.benchmark_tar_dir}}/zlib-1.2.11.tar.gz
          cd zlib-1.2.11
          mkdir build
          cd build
          cmake -DCMAKE_C_FLAGS="-w" ..
          bear make

      - name: Convert zlib
        run: |
          cd ${{env.benchmark_conv_dir}}/alltypes/zlib-1.2.11/build
          ${{env.port_tools}}/convert_project.py \
            --skip '/.*/test/.*' \
            --includeDir ${{env.include_dir}} \
            -p ${{env.builddir}}/bin/3c \
            -extra-3c-arg=-alltypes \
            -pr .

      - name: Build converted zlib (ignore failure)
        run: |
          cd ${{env.benchmark_conv_dir}}/alltypes/zlib-1.2.11/build
          cp -r out.checked/* .
          make -k CC="${{env.builddir}}/bin/clang" || true
